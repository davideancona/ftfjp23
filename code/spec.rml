new_hash(hash_id) matches {event:'func_post', name:'HashSet', resultId:hash_id};
not_new_hash not matches new_hash(_);
add(hash_id,elem_id) matches {event:'func_post', targetId:hash_id, name:'add', argIds:[elem_id], res:true};
not_add(hash_id) not matches add(hash_id,_);
remove(hash_id,elem_id) matches {event:'func_post', targetId:hash_id, name:'remove', argIds:[elem_id], res:true};
modify(targ_id) matches add(targ_id,_) | remove(targ_id,_);
not_modify_remove(hash_id,elem_id) not matches modify(elem_id) | remove(hash_id,elem_id);
op(hash_id,elem_id) matches {targetId:hash_id} | {targetId:elem_id};
relevant matches new_hash(_) | modify(_);

Main = relevant >> SafeHash;
SafeHash = not_new_hash* {let hash_id;new_hash(hash_id) (SafeHashTable<hash_id> /\ SafeHash)}?;
SafeHashTable<hash_id> = not_add(hash_id)* {let elem_id;add(hash_id,elem_id) (SafeHashElem<hash_id,elem_id> /\ SafeHashTable<hash_id>)}?;
SafeHashElem<hash_id,elem_id> = not_modify_remove(hash_id,elem_id)* (remove(hash_id,elem_id) all)?;
